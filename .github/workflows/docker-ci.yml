name: CI Build, Test & Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: cinema
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        ports:
          - 5433:5432

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
      # Checkout du code source
      - uses: actions/checkout@v3

      # Configurer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Installer les d√©pendances
      - name: Install dependencies
        run: npm install

      # V√©rifier la qualit√© du code
      - name: Run linting
        run: npm run lint

      # Ex√©cuter les tests (temporairement d√©sactiv√© - corrections en cours)
      # - name: Run tests
      #   run: npm test

      # √âtape de d√©bogage pour v√©rifier que le secret est bien charg√©
      - name: Check GitHub Secret GITHUBACTIONS
        run: |
          echo "Checking if GITHUBACTIONS secret is loaded:"
          echo "${{ secrets.GITHUBACTIONS }}" # Cela ne doit pas afficher la cl√© en entier pour des raisons de s√©curit√©, mais v√©rifie que le secret est charg√©

      # Configuration de la cl√© SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITHUBACTIONS }}" > ~/.ssh/github-actions
          chmod 600 ~/.ssh/github-actions
          ssh-keyscan -H 159.89.20.85 >> ~/.ssh/known_hosts

      # √âtapes de d√©bogage pour v√©rifier si la cl√© SSH a bien √©t√© stock√©e et a les bonnes permissions
      - name: Debug SSH Key
        run: |
          echo "Listing files in ~/.ssh"
          ls -l ~/.ssh
          echo "Permissions of the SSH key:"
          ls -l ~/.ssh/github-actions
          echo "SSH key content (first 5 lines):"
          head -n 5 ~/.ssh/github-actions

      # Copier le fichier .env.docker sur le droplet et le renommer en .env
      - name: Copy .env.docker to Droplet only if .env does not exist
        run: |
          ssh -i ~/.ssh/github-actions root@159.89.20.85 'if [ ! -f /var/www/nestjs-cinema/.env ]; then exit 1; fi'
        continue-on-error: true
      - name: Upload .env.docker only if .env does not exist
        if: failure()
        run: |
          scp -i ~/.ssh/github-actions .env.docker root@159.89.20.85:/var/www/nestjs-cinema/.env

      # Backup des bases de donn√©es avant d√©ploiement
      - name: Backup Databases
        run: |
          ssh -i ~/.ssh/github-actions root@159.89.20.85 << 'EOF'
            cd /var/www/nestjs-cinema

            # Configuration des backups
            BACKUP_DIR="/var/backups/nestjs-cinema"
            BACKUP_DATE=$(date +"%Y%m%d_%H%M%S")

            echo "=== Backup des bases de donn√©es ==="
            mkdir -p "$BACKUP_DIR"

            # Charger les variables d'environnement
            if [ -f ".env" ]; then
              source .env
              echo "üìã Configuration charg√©e depuis .env"
            fi

            # Backup PostgreSQL
            echo "üì¶ Backup PostgreSQL..."
            if command -v docker >/dev/null 2>&1; then
              # Utiliser le nom exact du conteneur PostgreSQL du docker-compose
              POSTGRES_CONTAINER="nestjs-cinema-postgres-1"
              if docker ps --format "{{.Names}}" | grep -q "$POSTGRES_CONTAINER"; then
                docker exec "$POSTGRES_CONTAINER" pg_dump -U "${DATABASE_USER:-postgres}" -d "${DATABASE_NAME:-cinema}" > "$BACKUP_DIR/postgres_backup_${BACKUP_DATE}.sql"
                if [ $? -eq 0 ]; then
                  gzip "$BACKUP_DIR/postgres_backup_${BACKUP_DATE}.sql"
                  echo "‚úÖ Backup PostgreSQL cr√©√©: $BACKUP_DIR/postgres_backup_${BACKUP_DATE}.sql.gz"
                else
                  echo "‚ùå Erreur lors du backup PostgreSQL"
                fi
              else
                echo "‚ö†Ô∏è Conteneur PostgreSQL ($POSTGRES_CONTAINER) non trouv√©"
                echo "Conteneurs disponibles:"
                docker ps --format "{{.Names}}"
              fi
            fi

            # Backup MongoDB
            echo "üì¶ Backup MongoDB..."
            if command -v docker >/dev/null 2>&1; then
              # Utiliser le nom exact du conteneur MongoDB du docker-compose
              MONGO_CONTAINER="nestjs-cinema-mongodb-1"
              if docker ps --format "{{.Names}}" | grep -q "$MONGO_CONTAINER"; then
                # Extraire le nom de la DB depuis MONGODB_URI ou utiliser "cinema" par d√©faut
                MONGO_DB_NAME="cinema"
                if [ ! -z "$MONGODB_URI" ]; then
                  MONGO_DB_NAME=$(echo "$MONGODB_URI" | sed 's|.*/||')
                fi

                docker exec "$MONGO_CONTAINER" mongodump --db "$MONGO_DB_NAME" --out /tmp/mongo_backup_${BACKUP_DATE}
                docker cp "$MONGO_CONTAINER":/tmp/mongo_backup_${BACKUP_DATE} "$BACKUP_DIR/"
                if [ $? -eq 0 ]; then
                  tar -czf "$BACKUP_DIR/mongo_backup_${BACKUP_DATE}.tar.gz" -C "$BACKUP_DIR" "mongo_backup_${BACKUP_DATE}"
                  rm -rf "$BACKUP_DIR/mongo_backup_${BACKUP_DATE}"
                  echo "‚úÖ Backup MongoDB cr√©√©: $BACKUP_DIR/mongo_backup_${BACKUP_DATE}.tar.gz"
                else
                  echo "‚ùå Erreur lors du backup MongoDB"
                fi
              else
                echo "‚ö†Ô∏è Conteneur MongoDB ($MONGO_CONTAINER) non trouv√©"
                echo "Conteneurs disponibles:"
                docker ps --format "{{.Names}}"
              fi
            fi

            # Nettoyer les anciens backups (>7 jours)
            find "$BACKUP_DIR" -name "*backup*" -mtime +7 -delete 2>/dev/null
            echo "üßπ Anciens backups nettoy√©s (>7 jours)"

            echo "‚úÖ Backup termin√© avec succ√®s"
          EOF

      # D√©ployer l'application sur le Droplet
      - name: Deploy to Droplet
        run: |
          ssh -i ~/.ssh/github-actions root@159.89.20.85 << 'EOF'
            cd /var/www/nestjs-cinema
            git pull origin main
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
          EOF
