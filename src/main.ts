import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';

import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as compression from 'compression';
import { TimeoutInterceptor } from './common/interceptors/timeout/timeout.interceptor';
import helmet from 'helmet';
import { Logger } from '@nestjs/common';
import { LogsService } from './common/logs/logs.service';
import { MongoLogger } from './common/logs/mongo-logger';
import { join } from 'path';
import { NextFunction, Request, Response } from 'express';
import * as express from 'express';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, {
    logger: ['error', 'warn', 'fatal', 'debug', 'log'],
  });
  const configService = app.get(ConfigService);

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Pour √©viter qu'une valeur inexistante dans le dto se rajoute √† la request du controller
      forbidNonWhitelisted: true, // Bloque la requ√™te si une valeur inexistante dans le dto est pr√©sente dans la request du controller
      transform: true, // Transforme les valeurs des param√®tres en fonction de leur type d√©fini dans le dto
      transformOptions: {
        enableImplicitConversion: true, // Transforme les valeurs des param√®tres en fonction de leur type d√©fini dans le dto
      },
      forbidUnknownValues: true,
      validationError: {
        target: false,
        value: false,
      },
    }),
  );

  const portNestjs: number = configService.get('appConfig.nestjsPort') || 3000;
  const portAngular: number =
    configService.get('appConfig.angularPort') || 4200;

  const apiUrl: string =
    configService.get('appConfig.apiUrl') || 'http://localhost:' + portNestjs;
  const apiVersion = configService.get<string>('API_VERSION') || '1.0.0';
  Logger.log(`API URL: ${apiUrl}`);

  // Configuration Swagger
  const config = new DocumentBuilder()
    .setTitle('API Syst√®me de Gestion de Cin√©ma')
    .setDescription(`
    ## Description
    API RESTful compl√®te pour un syst√®me de gestion de cin√©ma d√©velopp√© avec NestJS.

    ## Fonctionnalit√©s
    - üé¨ **Gestion des films** : Ajout, modification, suppression et recherche de films
    - üé≠ **Gestion des salles** : Configuration des salles et des places
    - üìÖ **S√©ances de cin√©ma** : Programmation et gestion des horaires
    - üéüÔ∏è **R√©servations** : Syst√®me complet de r√©servation en ligne
    - üë• **Utilisateurs** : Inscription, authentification et gestion des profils
    - üîî **Notifications** : Syst√®me d'alertes et de confirmations

    ## Authentification
    Cette API utilise l'authentification JWT. Pour acc√©der aux endpoints prot√©g√©s, vous devez :
    1. Cr√©er un compte ou vous connecter via \`/auth/login\`
    2. Utiliser le token JWT retourn√© dans le header \`Authorization: Bearer <token>\`

    ## Formats de R√©ponse
    Toutes les r√©ponses suivent le format standardis√© :
    \`\`\`json
    {
      "data": [...],
      "apiVersion": "1.0.0",
      "timestamp": "2024-03-20T10:30:00Z"
    }
    \`\`\`

    ## Support
    - Documentation technique : [api.bernabe.codes/documentation](https://api.bernabe.codes/documentation)
    - Repository GitHub : [github.com/BernabeLaurent/nestjs-cinema](https://github.com/BernabeLaurent/nestjs-cinema)
    `)
    .setTermsOfService('https://github.com/BernabeLaurent/nestjs-cinema/blob/main/LICENSE')
    .setContact(
      'Support Technique',
      'https://github.com/BernabeLaurent/nestjs-cinema/issues',
      'support@bernabe.codes'
    )
    .setLicense(
      'Licence MIT',
      'https://github.com/BernabeLaurent/nestjs-cinema/blob/main/LICENSE',
    )
    .setVersion(apiVersion)
    .addServer(apiUrl, 'Serveur de Production')
    .addServer('http://localhost:3000', 'Serveur de D√©veloppement')
    .addTag('Authentification', 'Endpoints pour la connexion et la gestion des tokens')
    .addTag('Films', 'Gestion des films et de leurs m√©tadonn√©es')
    .addTag('Salles', 'Configuration et gestion des salles de cin√©ma')
    .addTag('S√©ances', 'Programmation et gestion des s√©ances de cin√©ma')
    .addTag('R√©servations', 'Syst√®me de r√©servation et gestion des places')
    .addTag('Utilisateurs', 'Gestion des comptes utilisateurs et profils')
    .addTag('Notifications', 'Syst√®me de notifications et alertes')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: 'Entrez votre token JWT obtenu via /auth/login',
      },
      'access-token',
    )
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  // Activation de CORS
  const defaultOrigins = [
    apiUrl,
    'http://localhost:' + portNestjs,
    'http://127.0.0.1:' + portNestjs,
    'http://localhost:' + portAngular, // Pour angular
    'http://127.0.0.1:' + portAngular, // Pour angular avec IP
  ];
  const allowedOrigins = process.env.ALLOWED_ORIGINS
    ? [...process.env.ALLOWED_ORIGINS.split(','), ...defaultOrigins]
    : defaultOrigins;

  app.enableCors({
    origin: (origin, callback) => {
      console.log('Request from origin:', origin);
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true); // allow request
      } else {
        callback(new Error('Not allowed by CORS'));
      }
    },
    // origin: allowedOrigins,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    credentials: true,
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    exposedHeaders: ['Content-Range', 'X-Content-Range'],
    maxAge: 3600, // Cache les pr√©f√©rences CORS pendant 1 heure
  });

  // Pour que la doc COMPODOC soit accessible
  app.use(
    '/documentation',
    express.static(join(__dirname, '..', 'documentation')),
  );

  // Middleware pour rediriger documentation vers /documentation/index.html si n√©cessaire
  app.use(
    '/documentation',
    (req: Request, res: Response, next: NextFunction) => {
      if (req.path === '/' || req.path === '') {
        res.redirect('/documentation/index.html');
      } else {
        next();
      }
    },
  );

  app.use(compression());

  // ‚è±Ô∏è Timeout global en millisecondes
  app.useGlobalInterceptors(new TimeoutInterceptor());

  // Protection contre les attaques XSS et autres
  const validPolicies = ['same-origin', 'same-site', 'cross-origin'] as const;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  const policy = validPolicies.includes(process.env.POLICY as any)
    ? (process.env.POLICY as 'same-origin' | 'same-site' | 'cross-origin')
    : 'cross-origin';

  app.use(
    helmet({
      contentSecurityPolicy: true,
      crossOriginEmbedderPolicy: true,
      crossOriginOpenerPolicy: true,
      crossOriginResourcePolicy: { policy },
      dnsPrefetchControl: true,
      frameguard: { action: 'deny' }, // Protection contre le clickjacking
      hidePoweredBy: true,
      hsts: {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true,
      },
      ieNoOpen: true,
      noSniff: true, // Protection contre le MIME type sniffing
      originAgentCluster: true,
      permittedCrossDomainPolicies: { permittedPolicies: 'none' },
      referrerPolicy: { policy: 'strict-origin-when-cross-origin' },
      xssFilter: true, // Protection contre XSS
    }),
  );

  // Pour charger ma surcharge de Logger avec mongodb
  const logService = app.get(LogsService);
  const mongoLogger = new MongoLogger(logService);

  app.useLogger(mongoLogger);

  await app.listen(portNestjs, '0.0.0.0', () => {});
}

bootstrap().catch((error) => {
  console.error("Erreur lors du d√©marrage de l'application :", error);
});
