// üö´ D√©sactivation des r√®gles ESLint strictes n√©cessaires pour les tests
/* eslint-disable @typescript-eslint/unbound-method */
// ‚Üë Permet d'utiliser des m√©thodes Jest mock√©es sans erreur de binding

// ‚Üë Autorise les types 'any' dans les mocks (n√©cessaire pour la flexibilit√© des tests)

// üì¶ Imports n√©cessaires pour les tests
import { Test, TestingModule } from '@nestjs/testing'; // Outils NestJS pour cr√©er un module de test isol√©
import { NotFoundException } from '@nestjs/common'; // Exception √† tester dans les cas d'erreur
import { ImagesService } from './images.service'; // Le service √† tester
import { ImageType } from '../enums/images-types.enum'; // Enum pour les types d'images (POSTER, BACKDROP, ACTOR)
import * as fs from 'node:fs'; // Module filesystem Node.js (√† mocker)
import * as path from 'node:path'; // Module de gestion des chemins (pour construire les paths)
import axios from 'axios'; // Client HTTP pour t√©l√©charger les images (√† mocker)
import * as sharp from 'sharp'; // Biblioth√®que de traitement d'images (√† mocker)
import { WriteStream } from 'node:fs'; // Type TypeScript pour les streams d'√©criture

// üé≠ Configuration des mocks - Remplace les vrais modules par des versions contr√¥lables
jest.mock('axios'); // Mock axios pour contr√¥ler les r√©ponses HTTP sans vraies requ√™tes
jest.mock('node:fs'); // Mock du filesystem pour √©viter de cr√©er de vrais fichiers
jest.mock('sharp'); // Mock de Sharp pour √©viter le traitement r√©el d'images

// üîß Cast TypeScript des mocks pour acc√©der aux m√©thodes Jest (mockResolvedValue, etc.)
const mockedAxios = axios as jest.Mocked<typeof axios>; // Donne acc√®s √† axios.get.mockResolvedValue()
const mockedFs = fs as jest.Mocked<typeof fs>; // Donne acc√®s √† fs.existsSync.mockReturnValue()
const mockedSharp = sharp as jest.MockedFunction<typeof sharp>; // Donne acc√®s √† sharp.mockReturnValue()

// üèóÔ∏è Interfaces TypeScript pour typer strictement nos mocks

// Interface pour mocker l'objet Sharp transformer qui g√®re le traitement d'images
interface MockTransformer {
  // Mock de la m√©thode resize() qui redimensionne l'image
  resize: jest.MockedFunction<(options: { width: number }) => MockTransformer>;
  // Mock de la m√©thode webp() qui convertit au format WebP avec compression
  webp: jest.MockedFunction<(options: { quality: number }) => MockTransformer>;
  // Mock de la m√©thode pipe() qui cha√Æne vers le stream d'√©criture
  pipe: jest.MockedFunction<(destination: unknown) => MockWriteStream>;
}

// Interface pour mocker le WriteStream qui √©crit le fichier sur disque
interface MockWriteStream {
  // Mock de la m√©thode on() qui √©coute les √©v√©nements ('finish', 'error')
  on: jest.MockedFunction<
    (event: string, callback: (error?: Error) => void) => MockWriteStream
  >;
  // Mock de la m√©thode pipe() pour cha√Æner vers d'autres streams
  pipe: jest.MockedFunction<(destination: unknown) => unknown>;
}

// Interface pour mocker le stream de donn√©es HTTP re√ßu d'axios
interface MockStream {
  // Mock de pipe() pour connecter le stream HTTP vers Sharp
  pipe: jest.MockedFunction<(destination: MockTransformer) => MockTransformer>;
}

// üé™ Suite de tests principale pour ImagesService
describe('ImagesService', () => {
  // Variables partag√©es entre tous les tests de cette suite
  let service: ImagesService; // Instance du service √† tester
  let mockTransformer: MockTransformer; // Mock du transformer Sharp
  let mockWriteStream: MockWriteStream; // Mock du stream d'√©criture fichier

  // üìã Donn√©es de test constantes utilis√©es dans plusieurs tests
  const mockImageUrl = 'https://example.com/image.jpg'; // URL fictive pour les tests
  const mockFilename = 'test-image.jpg'; // Nom de fichier de test

  // ‚öôÔ∏è Configuration ex√©cut√©e avant chaque test individuel
  beforeEach(async () => {
    // üîß Configuration du mock Sharp transformer (cha√Ænage fluent)
    mockTransformer = {
      // Mock de resize() qui retourne lui-m√™me pour le cha√Ænage (.resize().webp())
      resize: jest.fn().mockReturnThis() as jest.MockedFunction<
        (options: { width: number }) => MockTransformer
      >,
      // Mock de webp() qui retourne lui-m√™me pour continuer le cha√Ænage
      webp: jest.fn().mockReturnThis() as jest.MockedFunction<
        (options: { quality: number }) => MockTransformer
      >,
      // Mock de pipe() qui connecte vers le stream d'√©criture
      pipe: jest.fn().mockReturnThis() as jest.MockedFunction<
        (destination: unknown) => MockWriteStream
      >,
    };

    // üìù Configuration du mock WriteStream pour l'√©criture fichier
    mockWriteStream = {
      // Mock de on() pour √©couter les √©v√©nements 'finish' et 'error'
      on: jest.fn().mockReturnThis() as jest.MockedFunction<
        (event: string, callback: (error?: Error) => void) => MockWriteStream
      >,
      // Mock de pipe() pour cha√Æner vers d'autres streams si n√©cessaire
      pipe: jest.fn() as jest.MockedFunction<(destination: unknown) => unknown>,
    };

    // üé® Configuration du mock Sharp principal - retourne notre transformer
    mockedSharp.mockReturnValue(mockTransformer as unknown as sharp.Sharp);

    // üìÅ Configuration des mocks filesystem
    mockedFs.existsSync.mockReturnValue(false); // Par d√©faut, fichiers n'existent pas
    mockedFs.mkdirSync.mockImplementation(() => undefined); // Cr√©ation dossier ne fait rien
    mockedFs.createWriteStream.mockReturnValue(
      mockWriteStream as unknown as WriteStream, // Retourne notre mock stream
    );

    // üèóÔ∏è Cr√©ation du module de test NestJS isol√©
    const module: TestingModule = await Test.createTestingModule({
      providers: [ImagesService], // Injection du service √† tester
    }).compile();

    // üì¶ R√©cup√©ration de l'instance du service depuis le module de test
    service = module.get(ImagesService);
  });

  // üßπ Nettoyage ex√©cut√© apr√®s chaque test pour isolation
  afterEach(() => {
    jest.clearAllMocks(); // Remet √† z√©ro tous les compteurs d'appels des mocks
  });

  // üîç Groupe de tests pour v√©rifier l'initialisation du service
  describe('Service initialization', () => {
    // Test de base ("smoke test") - v√©rifie que le service est correctement instanci√©
    it('should be defined', () => {
      expect(service).toBeDefined(); // Le service doit exister
    });
  });

  // üì• Groupe de tests pour la m√©thode principale de t√©l√©chargement
  describe('asyncDownloadImageFromUrl', () => {
    // ‚öôÔ∏è Configuration sp√©cifique aux tests de t√©l√©chargement
    beforeEach(() => {
      // üåä Mock d'un stream HTTP r√©ussi venant d'axios
      const mockStream: MockStream = {
        // Mock de pipe() qui connecte le stream HTTP vers Sharp
        pipe: jest.fn().mockReturnValue(mockTransformer) as jest.MockedFunction<
          (destination: MockTransformer) => MockTransformer
        >,
      };

      // üì° Mock de la r√©ponse HTTP d'axios avec le stream
      mockedAxios.get.mockResolvedValue({
        data: mockStream, // Le stream de donn√©es de l'image
        status: 200, // Code de succ√®s HTTP
      });

      // üîó Configuration du pipeline Sharp ‚Üí WriteStream
      mockTransformer.pipe.mockReturnValue(mockWriteStream);
    });

    // üéØ Test du syst√®me de cache - fichier existe d√©j√†
    it('should return existing file path when file already exists', async () => {
      // üìã ARRANGE - Pr√©paration du sc√©nario de test
      mockedFs.existsSync.mockReturnValue(true); // Force le fichier √† exister (cache hit)
      const expectedPath = path.join(
        process.cwd(), // R√©pertoire de travail actuel
        'uploads', // Dossier de base pour les images
        'posters', // Sous-dossier selon le type ImageType.POSTER
        'test-image.webp', // Nom avec extension forc√©e en WebP
      );

      // üé¨ ACT - Ex√©cution de la m√©thode √† tester
      const result = await service.asyncDownloadImageFromUrl(
        ImageType.POSTER, // Type d'image (d√©termine le dossier)
        mockImageUrl, // URL fictive de l'image
        mockFilename, // Nom de fichier de test
      );

      // ‚úÖ ASSERT - V√©rifications des r√©sultats
      expect(result).toBe(expectedPath); // Le service retourne le bon chemin
      expect(mockedAxios.get).not.toHaveBeenCalled(); // OPTIMISATION: pas de t√©l√©chargement inutile
    });

    // üì• Test du t√©l√©chargement complet - fichier n'existe pas
    it('should download and convert image successfully when file does not exist', async () => {
      // üìã ARRANGE - Pr√©paration du sc√©nario cache miss
      mockedFs.existsSync.mockReturnValue(false); // Force l'absence du fichier (cache miss)

      // üé≠ Simulation de l'√©v√©nement asynchrone de fin d'√©criture
      mockWriteStream.on.mockImplementation(
        (event: string, callback: (error?: Error) => void) => {
          if (event === 'finish') {
            // Quand le service √©coute l'√©v√©nement 'finish'
            setTimeout(() => {
              callback(); // D√©clenche le callback apr√®s 10ms (simulation r√©aliste)
            }, 10); // D√©lai pour simuler l'asynchronisme r√©el
          }
          return mockWriteStream; // Maintient le cha√Ænage fluent
        },
      );

      // üé¨ ACT - Ex√©cution de la m√©thode (cette fois t√©l√©chargement complet)
      const result = await service.asyncDownloadImageFromUrl(
        ImageType.POSTER, // Type d'image
        mockImageUrl, // URL √† t√©l√©charger
        mockFilename, // Nom du fichier de sortie
      );

      // ‚úÖ ASSERT - V√©rifications du t√©l√©chargement complet
      // V√©rifie qu'axios a √©t√© appel√© avec les bons param√®tres
      expect(mockedAxios.get).toHaveBeenCalledWith(mockImageUrl, {
        responseType: 'stream', // Important: type stream pour √©viter de charger en m√©moire
      });

      // V√©rifie le chemin de sortie final
      const expectedPath = path.join(
        process.cwd(), // R√©pertoire de travail
        'uploads', // Dossier de base
        'posters', // Sous-dossier selon le type
        'test-image.webp', // Nom avec conversion WebP
      );
      expect(result).toBe(expectedPath);

      // V√©rifie que le pipeline de transformation Sharp a √©t√© ex√©cut√©
      expect(mockedSharp).toHaveBeenCalled(); // Sharp a √©t√© instanci√©
      expect(mockTransformer.resize).toHaveBeenCalledWith({ width: 800 }); // Redimensionnement √† 800px
      expect(mockTransformer.webp).toHaveBeenCalledWith({ quality: 70 }); // Compression WebP √† 70%
    });

    // üí• Test de gestion d'erreur r√©seau - robustesse du service
    it('should handle download errors gracefully and return original URL', async () => {
      // üìã ARRANGE - Simulation d'une panne r√©seau
      mockedFs.existsSync.mockReturnValue(false); // Fichier n'existe pas
      mockedAxios.get.mockRejectedValue(new Error('Network error')); // Force une erreur r√©seau

      // üé¨ ACT - Ex√©cution malgr√© l'erreur
      const result = await service.asyncDownloadImageFromUrl(
        ImageType.POSTER,
        mockImageUrl,
        mockFilename,
      );

      // ‚úÖ ASSERT - V√©rification du comportement de fallback
      expect(result).toBe(mockImageUrl); // R√âSILIENCE: retourne l'URL originale en cas d'√©chec
    });

    // ‚ö†Ô∏è Test de gestion d'erreur d'√©criture fichier
    it('should handle file write errors', async () => {
      // üìã ARRANGE - Simulation d'une erreur d'√©criture disque
      mockedFs.existsSync.mockReturnValue(false); // Fichier n'existe pas

      // üé≠ Simulation d'un √©v√©nement d'erreur durant l'√©criture
      mockWriteStream.on.mockImplementation(
        (event: string, callback: (error?: Error) => void) => {
          if (event === 'error') {
            // Quand le service √©coute l'√©v√©nement 'error'
            setTimeout(() => {
              callback(new Error('Write error')); // D√©clenche une erreur d'√©criture
            }, 10); // D√©lai r√©aliste
          }
          return mockWriteStream;
        },
      );

      // üé¨ ACT & ASSERT combin√©s - V√©rification que l'erreur est bien propag√©e
      await expect(
        service.asyncDownloadImageFromUrl(
          ImageType.POSTER,
          mockImageUrl,
          mockFilename,
        ),
      ).rejects.toThrow('Write error'); // L'erreur doit √™tre remont√©e avec le bon message
    });

    // üìÅ Test param√©tr√© pour tous les types d'images - Data-Driven Testing
    it('should create correct folder structure for different image types', async () => {
      // üìã ARRANGE - Pr√©paration du test param√©tr√©
      mockedFs.existsSync.mockReturnValue(false); // Aucun fichier n'existe

      // üìä Tableau de donn√©es de test - couvre tous les types d'images de l'enum
      const testCases = [
        { type: ImageType.POSTER, expectedFolder: 'posters' }, // Affiches de films
        { type: ImageType.BACKDROP, expectedFolder: 'backdrops' }, // Images de fond
        { type: ImageType.ACTOR, expectedFolder: 'actors' }, // Photos d'acteurs
      ];

      // üîÑ Boucle de test - ex√©cute le m√™me test avec des donn√©es diff√©rentes
      for (const testCase of testCases) {
        // üé≠ Configuration de la simulation d'√©criture r√©ussie
        mockWriteStream.on.mockImplementation(
          (event: string, callback: (error?: Error) => void) => {
            if (event === 'finish') {
              setTimeout(() => {
                callback(); // Simule la fin d'√©criture
              }, 10);
            }
            return mockWriteStream;
          },
        );

        // üé¨ ACT - Ex√©cution avec le type d'image courant
        await service.asyncDownloadImageFromUrl(
          testCase.type, // Type diff√©rent √† chaque it√©ration
          mockImageUrl,
          mockFilename,
        );

        // ‚úÖ ASSERT - V√©rification de la cr√©ation du bon dossier
        const expectedPath = path.join(
          process.cwd(), // R√©pertoire de travail
          'uploads', // Dossier de base
          testCase.expectedFolder, // Dossier sp√©cifique au type (posters/backdrops/actors)
        );
        expect(mockedFs.mkdirSync).toHaveBeenCalledWith(expectedPath, {
          recursive: true, // Cr√©ation r√©cursive de toute la hi√©rarchie
        });
      }
    });

    // üîÑ Test de conversion d'extensions - WebP universel
    it('should convert filename extension to webp regardless of original extension', async () => {
      // üìã ARRANGE - Test avec diff√©rents formats d'image courants
      const testFilenames = [
        'image.jpg', // Format JPEG standard
        'photo.png', // Format PNG avec transparence
        'picture.jpeg', // Variante JPEG
        'graphic.gif', // Format GIF anim√©
      ];

      mockedFs.existsSync.mockReturnValue(true); // Force le cache hit pour √©viter le t√©l√©chargement

      // üîÑ Test pour chaque format d'entr√©e
      for (const filename of testFilenames) {
        // üé¨ ACT - Test avec un nom de fichier diff√©rent
        const result = await service.asyncDownloadImageFromUrl(
          ImageType.POSTER,
          mockImageUrl,
          filename, // Extension diff√©rente √† chaque it√©ration
        );

        // ‚úÖ ASSERT - V√©rifications de la conversion
        expect(result).toMatch(/\.webp$/); // REGEX: v√©rifie que √ßa finit par '.webp'
        expect(result).toContain(path.parse(filename).name); // V√©rifie que le nom de base est pr√©serv√©
        // Exemple: 'image.jpg' ‚Üí 'image.webp' (garde 'image', change '.jpg' ‚Üí '.webp')
      }
    });
  }); // Fin du groupe 'asyncDownloadImageFromUrl'

  // üîí Groupe de tests pour la m√©thode priv√©e getFolderPath (test√©e indirectement)
  describe('getFolderPath - Private method behavior', () => {
    // üö´ Test de validation d'entr√©e - type d'image invalide
    it('should throw NotFoundException for invalid image type', async () => {
      // üìã ARRANGE - Simulation d'un type d'image invalide
      mockedFs.existsSync.mockReturnValue(false);
      const invalidImageType = 999 as ImageType; // Force un type invalide (999 n'existe pas dans l'enum)

      // üé¨ ACT & ASSERT combin√©s - Test d'exception
      await expect(
        service.asyncDownloadImageFromUrl(
          invalidImageType, // Type invalide qui doit d√©clencher une NotFoundException
          'https://example.com/image.jpg',
          'test.jpg',
        ),
      ).rejects.toThrow(NotFoundException); // V√©rifie que l'exception sp√©cifique est lev√©e
    });

    // üìÅ Test de cr√©ation automatique de dossiers
    it('should create directory if it does not exist', async () => {
      // üìã ARRANGE - Simulation d'un dossier inexistant
      mockedFs.existsSync.mockReturnValue(false); // Le dossier n'existe pas

      // üé≠ Simulation standard d'√©criture r√©ussie
      mockWriteStream.on.mockImplementation(
        (event: string, callback: (error?: Error) => void) => {
          if (event === 'finish') {
            setTimeout(() => {
              callback(); // Simule la fin d'√©criture
            }, 10);
          }
          return mockWriteStream;
        },
      );

      // üé¨ ACT - Ex√©cution qui doit d√©clencher la cr√©ation du dossier
      await service.asyncDownloadImageFromUrl(
        ImageType.POSTER,
        mockImageUrl,
        mockFilename,
      );

      // ‚úÖ ASSERT - V√©rification que le dossier a √©t√© cr√©√©
      const expectedPath = path.join(process.cwd(), 'uploads', 'posters');
      expect(mockedFs.mkdirSync).toHaveBeenCalledWith(expectedPath, {
        recursive: true, // Cr√©ation r√©cursive de toute la hi√©rarchie
      });
    });
  }); // Fin du groupe 'getFolderPath - Private method behavior'

  // ‚ö° Groupe de tests pour les optimisations de performance
  describe('Performance and optimization', () => {
    // üåä Test de l'architecture par streams - Efficacit√© m√©moire
    it('should use streams for memory-efficient processing', async () => {
      // üìã ARRANGE - Configuration sp√©cifique pour tester le pipeline
      mockedFs.existsSync.mockReturnValue(false);

      // Red√©finition locale du mock stream pour ce test sp√©cifique
      const mockStream: MockStream = {
        pipe: jest.fn().mockReturnValue(mockTransformer) as jest.MockedFunction<
          (destination: MockTransformer) => MockTransformer
        >,
      };
      mockedAxios.get.mockResolvedValue({ data: mockStream }); // Axios retourne ce stream

      // Simulation standard d'√©criture r√©ussie
      mockWriteStream.on.mockImplementation(
        (event: string, callback: (error?: Error) => void) => {
          if (event === 'finish') {
            setTimeout(() => {
              callback();
            }, 10);
          }
          return mockWriteStream;
        },
      );

      // üé¨ ACT - Ex√©cution du pipeline complet
      await service.asyncDownloadImageFromUrl(
        ImageType.POSTER,
        mockImageUrl,
        mockFilename,
      );

      // ‚úÖ ASSERT - V√©rification du cha√Ænage de streams pour la performance
      // Pipeline v√©rifi√©: HTTP Stream ‚Üí Sharp Transformer ‚Üí File WriteStream
      expect(mockStream.pipe).toHaveBeenCalledWith(mockTransformer); // Stream HTTP vers Sharp
      expect(mockTransformer.pipe).toHaveBeenCalledWith(mockWriteStream); // Sharp vers fichier
      // AVANTAGE: Traitement en temps r√©el sans charger l'image enti√®re en m√©moire
    });

    // üé® Test des param√®tres d'optimisation d'images
    it('should apply correct image optimization settings', async () => {
      // üìã ARRANGE - Configuration pour tester les param√®tres Sharp
      mockedFs.existsSync.mockReturnValue(false);

      // Simulation d'√©criture r√©ussie
      mockWriteStream.on.mockImplementation(
        (event: string, callback: (error?: Error) => void) => {
          if (event === 'finish') {
            setTimeout(() => {
              callback(); // Simule la fin d'√©criture
            }, 10);
          }
          return mockWriteStream;
        },
      );

      // üé¨ ACT - Ex√©cution avec focus sur les optimisations
      await service.asyncDownloadImageFromUrl(
        ImageType.POSTER,
        mockImageUrl,
        mockFilename,
      );

      // ‚úÖ ASSERT - V√©rification des param√®tres d'optimisation pr√©cis
      expect(mockTransformer.resize).toHaveBeenCalledWith({ width: 800 }); // Redimensionnement √† 800px max
      expect(mockTransformer.webp).toHaveBeenCalledWith({ quality: 70 }); // Compression WebP √† 70% (√©quilibre qualit√©/taille)
      // OBJECTIF: R√©duire la taille des fichiers tout en gardant une qualit√© acceptable
    });
  }); // Fin du groupe 'Performance and optimization'
}); // Fin de la suite de tests compl√®te 'ImagesService'
